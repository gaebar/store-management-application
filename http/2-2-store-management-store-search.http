### Super Admin login and token generation

POST http://localhost:8080/api/v1/auth/authenticate
Content-Type: application/json

{
  "email": "admin@example.com",
  "password": "adminPassword"
}

> {%
    client.assert(response.body.token, "Token is not generated");
    client.global.set("admin-token", response.body.token);
%}

### Create Manager User

POST http://localhost:8080/api/v1/auth/register
Content-Type: application/json
Authorization: Bearer {{admin-token}}

{
  "firstname": "Robert",
  "lastname": "Taylor",
  "email": "manager@megastore.com",
  "password": "managerPassword",
  "role": "MANAGER"
}

> {%
    client.global.set("manager-id", response.body.id);
    client.assert(response.status === 200, "Status is not 200");
%}

### Retrieves the manager auth token
POST http://localhost:8080/api/v1/auth/authenticate
Content-Type: application/json

{
  "email": "manager@megastore.com",
  "password": "managerPassword"
}

> {%
    client.global.set("manager-token", response.body.token);
    client.assert(response.status === 200, "Status is not 200");
%}

### Check the Manager data - should have no stores assigned

GET http://localhost:8080/api/v1/users/{{manager-id}}
Content-Type: application/json
Authorization: Bearer {{admin-token}}

> {%
    client.assert(response.body.id, "Manager is not retrieved");
    client.assert(response.body.managedStores.length === 0, "Manager has stores assigned");
%}


### Create Store and save store id in global variable

POST http://localhost:8080/api/v1/admin/createStore
Content-Type: application/json
Authorization: Bearer {{admin-token}}

{
  "name": "Redmond Megastore",
  "location": "123 Red Street, Redmond, WA 98074",
  "contactInformation": "Telephone Number: 1234567890",
  "storeType": "retail",
  "openingDate": "2019-01-01"
}

> {%
    client.assert(response.body.id, "Store ID is not generated");
    client.global.set("store-id", response.body.id);
%}

### Create Store and save store id in global variable

POST http://localhost:8080/api/v1/admin/createStore
Content-Type: application/json
Authorization: Bearer {{admin-token}}

{
  "name": "Seattle Megastore",
  "location": "123 Red Street, Seattle, WA 98074",
  "contactInformation": "Telephone Number: 1234567890",
  "storeType": "retail",
  "openingDate": "2020-01-01"
}

> {%
    client.assert(response.body.id, "Store ID is not generated");
    client.global.set("store2-id", response.body.id);
%}



### Assign the store to the manager

POST http://localhost:8080/api/v1/users/addManagedStore/{{manager-id}}/{{store-id}}
Content-Type: application/json
Authorization: Bearer {{admin-token}}

> {%
    client.assert(response.status === 200, "Failed to assign store to manager");
%}

### Check the Manager's Access to Store

GET http://localhost:8080/api/v1/users/{{manager-id}}
Content-Type: application/json
Authorization: Bearer {{admin-token}}

> {%
    client.assert(response.body.id, "Manager is not retrieved");
    client.assert(response.body.managedStores[0].id, client.global.get("store-id"));
%}

### Create Category 1
POST http://localhost:8080/api/v1/categories/create
Content-Type: application/json
Authorization: Bearer {{admin-token}}

{
  "name": "Beauty",
  "supplier": "Baci and Abbracci"
}

> {%
    client.global.set("category1-id", response.body.id);
%}

### Create Item 1 (Lipstick)
POST http://localhost:8080/api/v1/items/create
Content-Type: application/json
Authorization: Bearer {{admin-token}}

{
  "name": "Lipstick",
  "description": "Matte finish, long-lasting",
  "category": {{category1-id}},
  "price": 20.0,
  "quantity": 50,
  "initialQuantity": 50
}

> {%
    client.global.set("item1-id", response.body.id);
    client.assert(response.body.name, "Item 1 is not created")
%}

### Create Item 2 (Foundation)
POST http://localhost:8080/api/v1/items/create
Content-Type: application/json
Authorization: Bearer {{admin-token}}

{
  "name": "Foundation",
  "description": "Autumn shade, matte finish",
  "category": {{category1-id}},
  "price": 10.0,
  "quantity": 20,
  "initialQuantity": 30
}

> {%
    client.global.set("item2-id", response.body.id);
    client.assert(response.body.name, "Item 2 is not created")
%}



### Add item 1 to a store inventory

PUT http://localhost:8080/api/v1/inventories/{{store-id}}/{{item1-id}}/3
Authorization: Bearer {{manager-token}}
Content-Type: application/json

> {%
    client.assert(response.status === 200, "Inventory is not added");
    client.assert(response.body.quantity === 3, "Inventory is not added");
%}

### Add items to a store's inventory again

PUT http://localhost:8080/api/v1/inventories/{{store-id}}/{{item1-id}}/1
Authorization: Bearer {{manager-token}}
Content-Type: application/json

> {%
    client.assert(response.status === 200, "Inventory is not added");
    client.assert(response.body.quantity === 4, "Inventory is not added");
%}

### Add item 2 to a store inventory

PUT http://localhost:8080/api/v1/inventories/{{store-id}}/{{item2-id}}/7
Authorization: Bearer {{manager-token}}
Content-Type: application/json

> {%
    client.assert(response.status === 200, "Inventory Item 2 is not added");
    client.assert(response.body.quantity === 7, "Inventory is not added");
%}

### Check the store inventory
GET http://localhost:8080/api/v1/stores/getStore/{{store-id}}
Content-Type: application/json
Authorization: Bearer {{manager-token}}

> {%
    client.assert(response.body.id == client.global.get("store-id"), "Store ID is not matching");
    client.assert(response.body.storeInventories.length == 2, "Inventory is not retrieved");

    client.global.set("minPrice", 1);
    client.global.set("maxPrice", 10);
%}


### Search by store location
GET http://localhost:8080/api/v1/search/store-location/seattle
Content-Type: application/json

> {%
    client.assert(response.body.length == 1, "Search by location is not working");
%}

### Search by store name
GET http://localhost:8080/api/v1/search/store-name/redmond
Content-Type: application/json

> {%
    client.assert(response.body.length == 1, "Search by name is not working");
%}

### Search by store type
GET http://localhost:8080/api/v1/search/store-type/retail
Content-Type: application/json

> {%
    client.assert(response.body.length == 2, "Search by type is not working");
%}

### Search by opening date after
GET http://localhost:8080/api/v1/search/store-opening-date-after/2019-01-01
Content-Type: application/json

> {%
    client.assert(response.body.length == 1, "Search by opening date after is not working");
%}

### Delete Inventory from the store (cleanup after tests)

DELETE http://localhost:8080/api/v1/inventories/{{store-id}}
Authorization: Bearer {{admin-token}}

> {%
    client.assert(response.status === 200, "Inventory is not deleted");
%}

### Delete Store Manager (cleanup after tests)

DELETE http://localhost:8080/api/v1/users/delete/{{manager-id}}
Content-Type: application/json
Authorization: Bearer {{admin-token}}

> {%
    client.assert(response.status === 200, "Manager is not deleted");
%}

### Delete Item 1
DELETE http://localhost:8080/api/v1/items/delete/{{item1-id}}
Content-Type: application/json
Authorization: Bearer {{admin-token}}

> {%
    client.assert(response.status == 200);
%}

### Delete Item 2
DELETE http://localhost:8080/api/v1/items/delete/{{item2-id}}
Content-Type: application/json
Authorization: Bearer {{admin-token}}

> {%
    client.assert(response.status == 200);
%}

### Delete Store (cleanup after tests)

DELETE http://localhost:8080/api/v1/admin/deleteStore/{{store-id}}
Content-Type: application/json
Authorization: Bearer {{admin-token}}

> {%
    client.assert(response.status === 200, "Store is not deleted");
%}

### Delete Store 2 (cleanup after tests)

DELETE http://localhost:8080/api/v1/admin/deleteStore/{{store2-id}}
Content-Type: application/json
Authorization: Bearer {{admin-token}}

> {%
    client.assert(response.status === 200, "Store is not deleted");
%}


