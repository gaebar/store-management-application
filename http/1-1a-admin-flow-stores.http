# Super Admin login flow

### Super Admin login and token generation
POST http://localhost:8080/api/v1/auth/authenticate
Content-Type: application/json

{
  "email": "admin@example.com",
  "password": "adminPassword"
}

> {%
    client.assert(response.body.token, "Token is not generated");
    client.global.set("auth-token", response.body.token);
%}

### Create Store and save store id in global variable
POST http://localhost:8080/api/v1/admin/createStore
Content-Type: application/json
Authorization: Bearer {{auth-token}}

{
  "name": "Redmond Megastore",
  "location": "123 Red Street, Redmond, WA 98074",
  "contactInformation": "Telephone Number: 1234567890",
  "storeType": "retail",
  "openingDate": "2019-01-01"
}

> {%
    client.assert(response.body.id, "Store ID is not generated");
    client.global.set("store-id", response.body.id);
%}

### Update Store
PUT http://localhost:8080/api/v1/admin/updateStore/{{store-id}}
Content-Type: application/json
Authorization: Bearer {{auth-token}}

{
  "name": "Redmond Megastore",
  "location": "234 Blue Street, Redmond, WA 98074",
  "contactInformation": "Telephone Number: 1234567890",
  "storeType": "retail",
  "openingDate": "2019-01-01"
}

> {%
    client.assert(response.body.location == "234 Blue Street, Redmond, WA 98074", "Store location is not updated");
%}

### Get Store by ID
GET http://localhost:8080/api/v1/stores/getStore/{{store-id}}
Content-Type: application/json
Authorization: Bearer {{auth-token}}

> {%
    client.assert(response.body.id == client.global.get("store-id"), "Store ID is not matching");
%}

### Delete Store by ID
DELETE http://localhost:8080/api/v1/admin/deleteStore/{{store-id}}
Content-Type: application/json
Authorization: Bearer {{auth-token}}
