### Super Admin login and token generation

POST http://localhost:8080/api/v1/auth/authenticate
Content-Type: application/json

{
  "email": "admin@example.com",
  "password": "adminPassword"
}

> {%
    client.assert(response.body.token, "Token is not generated");
    client.global.set("admin-token", response.body.token);
%}


### Create Store Manager

POST http://localhost:8080/api/v1/users/create
Content-Type: application/json
Authorization: Bearer {{admin-token}}

{
  "firstname": "Robert",
  "lastname": "Taylor",
  "email": "manager@megastore.com",
  "password": "managerPassword",
  "role": "MANAGER"
}

> {%
    client.assert(response.body.id, "Manager is not generated");
    client.global.set("manager-id", response.body.id);
%}

### Store Manager login and token generation

POST http://localhost:8080/api/v1/auth/authenticate
Content-Type: application/json

{
  "email": "manager@megastore.com",
  "password": "managerPassword"
}

> {%
    client.assert(response.body.token, "Manager Token is not generated");
    client.global.set("manager-token", response.body.token);
%}



### Create Store and save store id in global variable

POST http://localhost:8080/api/v1/admin/createStore
Content-Type: application/json
Authorization: Bearer {{admin-token}}

{
  "name": "Redmond Megastore",
  "location": "123 Red Street, Redmond, WA 98074",
  "contactInformation": "Telephone Number: 1234567890",
  "storeType": "retail",
  "openingDate": "2019-01-01"
}

> {%
    client.assert(response.body.id, "Store ID is not generated");
    client.global.set("store1-id", response.body.id);
%}

### Create Store 2 and save store id in global variable

POST http://localhost:8080/api/v1/admin/createStore
Content-Type: application/json
Authorization: Bearer {{admin-token}}

{
  "name": "Redmond Megastore 2",
  "location": "123 Red Street, Redmond, WA 98074 2",
  "contactInformation": "Telephone Number: 1234567890 2",
  "storeType": "retail",
  "openingDate": "2019-01-01"
}

> {%
    client.assert(response.body.id, "Store ID is not generated");
    client.global.set("store2-id", response.body.id);
%}



### Assign the store 1 to the manager

POST http://localhost:8080/api/v1/users/addManagedStore/{{manager-id}}/{{store1-id}}
Content-Type: application/json
Authorization: Bearer {{admin-token}}

> {%
    client.assert(response.status === 200, "Failed to assign store to manager");
%}

### Assign the store 2 to the manager

POST http://localhost:8080/api/v1/users/addManagedStore/{{manager-id}}/{{store2-id}}
Content-Type: application/json
Authorization: Bearer {{admin-token}}

> {%
    client.assert(response.status === 200, "Failed to assign store to manager");
%}

### Get the stores associated with the authenticated manager

GET http://localhost:8080/api/v1/users/managedStores/{{manager-id}}
Content-Type: application/json
Authorization: Bearer {{admin-token}}

> {%
    client.assert(response.body[0].id, "Store is not found");
    client.global.set("store1-id", response.body[0].id);
%}

### Check the Manager's Access to Store

GET http://localhost:8080/api/v1/users/get/{{manager-id}}
Content-Type: application/json
Authorization: Bearer {{auth-token}}

> {%
    client.assert(response.body.id, "Manager is not retrieved");
    client.assert(response.body.managedStores[0].id, client.global.get("store1-id"));
%}

### Create Item 1 (Lipstick)
POST http://localhost:8080/api/v1/items/create
Content-Type: application/json
Authorization: Bearer {{admin-token}}

{
  "name": "Lipstick",
  "description": "Matte finish, long-lasting",
  "itemCategory": "{{category1-id}}",
  "price": 20.0,
  "quantity": 50,
  "initialQuantity": 50
}

> {%
    client.global.set("item1-id", response.body.id);
    client.assert(response.body.name, "Item 1 is not created")
%}

### Get Item by ID
GET http://localhost:8080/api/v1/items/{{item1-id}}
Content-Type: application/json
Authorization: Bearer {{manager-token}}

### Create Item 2 (Foundation)
POST http://localhost:8080/api/v1/items/create
Content-Type: application/json
Authorization: Bearer {{admin-token}}

{
  "name": "Foundation",
  "description": "Autumn shade, matte finish",
  "itemCategory": "{{category1-id}}",
  "price": 11.0,
  "quantity": 20,
  "initialQuantity": 20
}

> {%
    client.global.set("item2-id", response.body.id);
    client.assert(response.body.name, "Item 2 is not created")
%}

### Get Item by ID
GET http://localhost:8080/api/v1/items/{{item2-id}}
Content-Type: application/json
Authorization: Bearer {{manager-token}}

> {%
    client.assert(response.body.name == "Foundation");
%}


### Create Item 3 with manager token - Item creation should fail
POST http://localhost:8080/api/v1/items/create
Content-Type: application/json
Authorization: Bearer {{manager-token}}

{
  "name": "Eyeliner",
  "description": "Black, waterproof",
  "itemCategory": "{{category1-id}}",
  "price": 20.0,
  "quantity": 50,
  "initialQuantity": 50
}

> {%
    client.assert(response.body.name == null, "Item 3 was created")
%}


### Add item 1 to store inventory

PUT http://localhost:8080/api/v1/inventories/{{store1-id}}/{{item1-id}}/3
Authorization: Bearer {{manager-token}}
Content-Type: application/json

> {%
    client.global.set("inventory1-id", response.body.id);
    client.assert(response.status === 200, "Inventory is not added");
    client.assert(response.body.quantity === 3, "Inventory is not added");
%}


### Add item 2 to a store inventory

PUT http://localhost:8080/api/v1/inventories/{{store1-id}}/{{item2-id}}/5
Authorization: Bearer {{manager-token}}
Content-Type: application/json

> {%
    client.global.set("inventory2-id", response.body.id);
    client.assert(response.status === 200, "Inventory is not added");
    client.assert(response.body.quantity === 5, "Inventory is not added");
%}

### Get the inventory of a store
GET http://localhost:8080/api/v1/stores/getStoreInventory/{{store1-id}}
Content-Type: application/json
Authorization: Bearer {{manager-token}}

> {%
    client.assert(response.status === 200, "Inventory is not retrieved");
    client.assert(response.body[0].item.name === 'Lipstick', "Inventory is not retrieved");
    client.assert(response.body[1].item.name === 'Foundation', "Inventory is not retrieved");
%}

### Delete Inventory 1 from the store (cleanup after tests)

DELETE http://localhost:8080/api/v1/inventories/{{inventory1-id}}
Authorization: Bearer {{manager-token}}

> {%
    client.assert(response.status === 200, "Inventory is not deleted");
%}

### Delete Inventory 2 from the store (cleanup after tests)

DELETE http://localhost:8080/api/v1/inventories/{{inventory2-id}}
Authorization: Bearer {{admin-token}}

> {%
    client.assert(response.status === 200, "Inventory is not deleted");
%}


### Delete Item 1
DELETE http://localhost:8080/api/v1/items/delete/{{item1-id}}
Content-Type: application/json
Authorization: Bearer {{admin-token}}

> {%
    client.assert(response.status == 200);
%}

### Delete Item 2
DELETE http://localhost:8080/api/v1/items/delete/{{item2-id}}
Content-Type: application/json
Authorization: Bearer {{admin-token}}

> {%
    client.assert(response.status == 200);
%}

### Delete Managed Store (cleanup after tests)
DELETE http://localhost:8080/api/v1/users/removeManagedStore/{{manager-id}}/{{store1-id}}
Content-Type: application/json
Authorization: Bearer {{admin-token}}

> {%
    client.assert(response.status === 200, "Store is not deleted");
%}

### Delete Store 1 (cleanup after tests)

DELETE http://localhost:8080/api/v1/admin/deleteStore/{{store1-id}}
Content-Type: application/json
Authorization: Bearer {{admin-token}}

> {%
    client.assert(response.status === 200, "Store is not deleted");
%}

### Delete Store 2 (cleanup after tests)

DELETE http://localhost:8080/api/v1/admin/deleteStore/{{store2-id}}
Content-Type: application/json
Authorization: Bearer {{admin-token}}

> {%
    client.assert(response.status === 200, "Store is not deleted");
%}



### Delete Store Manager (cleanup after tests)

DELETE http://localhost:8080/api/v1/users/delete/{{manager-id}}
Content-Type: application/json
Authorization: Bearer {{admin-token}}

> {%
    client.assert(response.status === 200, "Manager is not deleted");
%}
